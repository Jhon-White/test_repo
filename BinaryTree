class Node {
    constructor(value) {
        this.right = null
        this.left = null
        this.value = value
    }
}

class BinarySearchTree {
    constructor() {
        this.root = null
    }

    insert(value) {
        const newNode = new Node(value)
        if (this.root === null) {
            this.root = newNode
            return value
        }

        let current = this.root
        let prev = {left: null, right: null}
        while(current) {
            prev = {left: null, right: null}
            if (value < current.value) {
                prev.left = current
                current = current.left
            } else {
                prev.right = current
                current = current.right
            }
        }

        if (prev.left) {
            prev.left.left = newNode
        }

        if (prev.right) {
            prev.right.right = newNode
        }


    }
 
    lookup(value) {
        if (this.root === null) {
            return null
        }

        let current = this.root
        while(current) {
            if (value === current.value) {
                return current
            }

            if (value < current.value) {
              current = current.left   
            } else {
                current = current.right
            }
        }

        return null
    }
}

function traverse(node) {
    const tree = {value: node.value}

    tree.left = node.left === null ? null : traverse(node.left)
    tree.right = node.right === null ? null: traverse(node.right)

    return tree 
}

let tree = new BinarySearchTree()

tree.insert(9)
tree.insert(4)
tree.insert(6)
tree.insert(20)
tree.insert(170)
tree.insert(15)
tree.insert(1)

// let res = JSON.stringify(traverse(tree.root))

//       9
//    4     20
//  1  6  15  170     
